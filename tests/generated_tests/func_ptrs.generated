TEST_CASE( "Testing wasm <func_ptrs_test_0_wasm>", "[func_ptrs_test_0_wasm_tests]" ) {
   auto code = backend_t::read_wasm( func_ptrs_test_0_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "one", )) == static_cast<uint32_t>(13));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "two", static_cast<uint32_t>(13))) == static_cast<uint32_t>(14));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "three", static_cast<uint32_t>(13))) == static_cast<uint32_t>(11));
}

TEST_CASE( "Testing wasm <func_ptrs_test_8_wasm>", "[func_ptrs_test_8_wasm_tests]" ) {
   auto code = backend_t::read_wasm( func_ptrs_test_8_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(0))) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(1))) == static_cast<uint32_t>(2));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(2))) == static_cast<uint32_t>(3));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(3))) == static_cast<uint32_t>(4));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(4))) == static_cast<uint32_t>(5));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(5))) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(6))) == static_cast<uint32_t>(3));
   CHECK_THROWS_AS(bkend(nullptr, "env", "callt", static_cast<uint32_t>(7)), std::exception);
   CHECK_THROWS_AS(bkend(nullptr, "env", "callt", static_cast<uint32_t>(100)), std::exception);
   CHECK_THROWS_AS(bkend(nullptr, "env", "callt", static_cast<uint32_t>(4294967295)), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(0))) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(1))) == static_cast<uint32_t>(2));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(2))) == static_cast<uint32_t>(3));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(3))) == static_cast<uint32_t>(4));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(4))) == static_cast<uint32_t>(5));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(5))) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callu", static_cast<uint32_t>(6))) == static_cast<uint32_t>(3));
   CHECK_THROWS_AS(bkend(nullptr, "env", "callu", static_cast<uint32_t>(7)), std::exception);
   CHECK_THROWS_AS(bkend(nullptr, "env", "callu", static_cast<uint32_t>(100)), std::exception);
   CHECK_THROWS_AS(bkend(nullptr, "env", "callu", static_cast<uint32_t>(4294967295)), std::exception);
}

TEST_CASE( "Testing wasm <func_ptrs_test_9_wasm>", "[func_ptrs_test_9_wasm_tests]" ) {
   auto code = backend_t::read_wasm( func_ptrs_test_9_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(0))) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "callt", static_cast<uint32_t>(1))) == static_cast<uint32_t>(2));
}

