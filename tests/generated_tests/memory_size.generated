TEST_CASE( "Testing wasm <memory_size_test_0_wasm>", "[memory_size_test_0_wasm_tests]" ) {
   auto code = backend_t::read_wasm( memory_size_test_0_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(1));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(4))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(5));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(0))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(5));
}

TEST_CASE( "Testing wasm <memory_size_test_1_wasm>", "[memory_size_test_1_wasm_tests]" ) {
   auto code = backend_t::read_wasm( memory_size_test_1_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(1));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(2));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(4))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(6));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(0))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(6));
}

TEST_CASE( "Testing wasm <memory_size_test_2_wasm>", "[memory_size_test_2_wasm_tests]" ) {
   auto code = backend_t::read_wasm( memory_size_test_2_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(3))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(1));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(0))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(1));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(4))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(1));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(2));
}

TEST_CASE( "Testing wasm <memory_size_test_3_wasm>", "[memory_size_test_3_wasm_tests]" ) {
   auto code = backend_t::read_wasm( memory_size_test_3_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(3));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(4));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(3))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(7));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(0))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(7));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(2))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(7));
   CHECK(!bkend.call_with_return(nullptr, "env", "grow", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "size", )) == static_cast<uint32_t>(8));
}

