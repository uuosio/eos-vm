TEST_CASE( "Testing wasm <func_test_0_wasm>", "[func_test_0_wasm_tests]" ) {
   auto code = backend_t::read_wasm( func_test_0_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(!bkend.call_with_return(nullptr, "env", "type-use-1", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "type-use-2", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "type-use-3", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "type-use-4", static_cast<uint32_t>(1), static_cast<double>(4607182418800017408), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "type-use-5", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "type-use-6", static_cast<uint32_t>(1))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "type-use-7", static_cast<uint32_t>(1), static_cast<double>(4607182418800017408), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "local-first-i32", )) == static_cast<uint32_t>(0));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "local-first-i64", )) == static_cast<uint64_t>(0));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "local-first-f32", )) == static_cast<float>(0));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "local-first-f64", )) == static_cast<double>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "local-second-i32", )) == static_cast<uint32_t>(0));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "local-second-i64", )) == static_cast<uint64_t>(0));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "local-second-f32", )) == static_cast<float>(0));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "local-second-f64", )) == static_cast<double>(0));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "local-mixed", )) == static_cast<double>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "param-first-i32", static_cast<uint32_t>(2), static_cast<uint32_t>(3), )) == static_cast<uint32_t>(2));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "param-first-i64", static_cast<uint64_t>(2), static_cast<uint64_t>(3), )) == static_cast<uint64_t>(2));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "param-first-f32", static_cast<float>(1073741824), static_cast<float>(1077936128), )) == static_cast<float>(1073741824));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "param-first-f64", static_cast<double>(4611686018427387904), static_cast<double>(4613937818241073152), )) == static_cast<double>(4611686018427387904));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "param-second-i32", static_cast<uint32_t>(2), static_cast<uint32_t>(3), )) == static_cast<uint32_t>(3));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "param-second-i64", static_cast<uint64_t>(2), static_cast<uint64_t>(3), )) == static_cast<uint64_t>(3));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "param-second-f32", static_cast<float>(1073741824), static_cast<float>(1077936128), )) == static_cast<float>(1077936128));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "param-second-f64", static_cast<double>(4611686018427387904), static_cast<double>(4613937818241073152), )) == static_cast<double>(4613937818241073152));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "param-mixed", static_cast<float>(1065353216), static_cast<uint32_t>(2), static_cast<uint64_t>(3), static_cast<uint32_t>(4), static_cast<double>(4617878467915022336), static_cast<uint32_t>(6), )) == static_cast<double>(4617878467915022336));
   CHECK(!bkend.call_with_return(nullptr, "env", "empty", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "value-void", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "value-i32", )) == static_cast<uint32_t>(77));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "value-i64", )) == static_cast<uint64_t>(7777));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "value-f32", )) == static_cast<float>(1117480550));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "value-f64", )) == static_cast<double>(4635172994171566817));
   CHECK(!bkend.call_with_return(nullptr, "env", "value-block-void", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "value-block-i32", )) == static_cast<uint32_t>(77));
   CHECK(!bkend.call_with_return(nullptr, "env", "return-empty", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "return-i32", )) == static_cast<uint32_t>(78));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "return-i64", )) == static_cast<uint64_t>(7878));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "return-f32", )) == static_cast<float>(1117611622));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "return-f64", )) == static_cast<double>(4635244066603186258));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "return-block-i32", )) == static_cast<uint32_t>(77));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-empty", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-i32", )) == static_cast<uint32_t>(79));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "break-i64", )) == static_cast<uint64_t>(7979));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "break-f32", )) == static_cast<float>(1117768909));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "break-f64", )) == static_cast<double>(4635315139034805699));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-block-i32", )) == static_cast<uint32_t>(77));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_if-empty", static_cast<uint32_t>(0))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_if-empty", static_cast<uint32_t>(2))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_if-num", static_cast<uint32_t>(0))) == static_cast<uint32_t>(51));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_if-num", static_cast<uint32_t>(1))) == static_cast<uint32_t>(50));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-empty", static_cast<uint32_t>(0))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-empty", static_cast<uint32_t>(1))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-empty", static_cast<uint32_t>(5))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-empty", static_cast<uint32_t>(4294967295))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-num", static_cast<uint32_t>(0))) == static_cast<uint32_t>(50));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-num", static_cast<uint32_t>(1))) == static_cast<uint32_t>(50));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-num", static_cast<uint32_t>(10))) == static_cast<uint32_t>(50));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-num", static_cast<uint32_t>(4294967196))) == static_cast<uint32_t>(50));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-nested-empty", static_cast<uint32_t>(0))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-nested-empty", static_cast<uint32_t>(1))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-nested-empty", static_cast<uint32_t>(3))));
   CHECK(!bkend.call_with_return(nullptr, "env", "break-br_table-nested-empty", static_cast<uint32_t>(4294967294))));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-nested-num", static_cast<uint32_t>(0))) == static_cast<uint32_t>(52));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-nested-num", static_cast<uint32_t>(1))) == static_cast<uint32_t>(50));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-nested-num", static_cast<uint32_t>(2))) == static_cast<uint32_t>(52));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "break-br_table-nested-num", static_cast<uint32_t>(4294967293))) == static_cast<uint32_t>(52));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "init-local-i32", )) == static_cast<uint32_t>(0));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "init-local-i64", )) == static_cast<uint64_t>(0));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "init-local-f32", )) == static_cast<float>(0));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "init-local-f64", )) == static_cast<double>(0));
}

TEST_CASE( "Testing wasm <func_test_1_wasm>", "[func_test_1_wasm_tests]" ) {
   auto code = backend_t::read_wasm( func_test_1_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <func_test_3_wasm>", "[func_test_3_wasm_tests]" ) {
   auto code = backend_t::read_wasm( func_test_3_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(!bkend.call_with_return(nullptr, "env", "signature-explicit-reused", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "signature-implicit-reused", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "signature-explicit-duplicate", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "signature-implicit-duplicate", )));
}

