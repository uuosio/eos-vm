TEST_CASE( "Testing wasm <load_test_0_wasm>", "[load_test_0_wasm_tests]" ) {
   auto code = backend_t::read_wasm( load_test_0_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-br-value", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-br_if-cond", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-br_if-value", )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-br_if-value-cond", )) == static_cast<uint32_t>(7));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-br_table-index", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-br_table-value", )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-br_table-value-index", )) == static_cast<uint32_t>(6));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-return-value", )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-if-cond", )) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-if-then", )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-if-else", )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-select-first", static_cast<uint32_t>(0), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-select-second", static_cast<uint32_t>(0), static_cast<uint32_t>(0), )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-select-cond", )) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call-first", )) == static_cast<uint32_t>(4294967295));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call-mid", )) == static_cast<uint32_t>(4294967295));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call-last", )) == static_cast<uint32_t>(4294967295));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call_indirect-first", )) == static_cast<uint32_t>(4294967295));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call_indirect-mid", )) == static_cast<uint32_t>(4294967295));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call_indirect-last", )) == static_cast<uint32_t>(4294967295));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-call_indirect-index", )) == static_cast<uint32_t>(4294967295));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-local.set-value", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-local.tee-value", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-global.set-value", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-load-address", )) == static_cast<uint32_t>(0));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-loadN-address", )) == static_cast<uint32_t>(0));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-store-address", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-store-value", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-storeN-address", )));
   CHECK(!bkend.call_with_return(nullptr, "env", "as-storeN-value", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-unary-operand", )) == static_cast<uint32_t>(32));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-binary-left", )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-binary-right", )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-test-operand", )) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-compare-left", )) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-compare-right", )) == static_cast<uint32_t>(1));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "as-memory.grow-size", )) == static_cast<uint32_t>(1));
}

