TEST_CASE( "Testing wasm <unwind_test_0_wasm>", "[unwind_test_0_wasm_tests]" ) {
   auto code = backend_t::read_wasm( unwind_test_0_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK_THROWS_AS(bkend(nullptr, "env", "func-unwind-by-unreachable", ), std::exception);
   CHECK(!bkend.call_with_return(nullptr, "env", "func-unwind-by-br", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "func-unwind-by-br-value", )) == static_cast<uint32_t>(9));
   CHECK(!bkend.call_with_return(nullptr, "env", "func-unwind-by-br_if", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "func-unwind-by-br_if-value", )) == static_cast<uint32_t>(9));
   CHECK(!bkend.call_with_return(nullptr, "env", "func-unwind-by-br_table", )));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "func-unwind-by-br_table-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "func-unwind-by-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "block-unwind-by-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-br-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-br_if-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-br_table-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-unwind-by-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "block-nested-unwind-by-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-br-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-br_if-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-br_table-value", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-nested-unwind-by-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "unary-after-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "unary-after-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "unary-after-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "unary-after-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "unary-after-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "binary-after-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "binary-after-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "binary-after-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "binary-after-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "binary-after-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "select-after-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "select-after-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "select-after-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "select-after-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "select-after-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "block-value-after-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-value-after-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-value-after-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-value-after-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "block-value-after-return", )) == static_cast<uint32_t>(9));
   CHECK_THROWS_AS(bkend(nullptr, "env", "loop-value-after-unreachable", ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "loop-value-after-br", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "loop-value-after-br_if", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "loop-value-after-br_table", )) == static_cast<uint32_t>(9));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "loop-value-after-return", )) == static_cast<uint32_t>(9));
}

