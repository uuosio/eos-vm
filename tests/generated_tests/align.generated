TEST_CASE( "Testing wasm <align_test_0_wasm>", "[align_test_0_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_0_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_106_wasm>", "[align_test_106_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_106_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "f32_align_switch", static_cast<uint32_t>(0))) == static_cast<float>(1092616192));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "f32_align_switch", static_cast<uint32_t>(1))) == static_cast<float>(1092616192));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "f32_align_switch", static_cast<uint32_t>(2))) == static_cast<float>(1092616192));
   CHECK(to_f32(*bkend.call_with_return(nullptr, "env", "f32_align_switch", static_cast<uint32_t>(3))) == static_cast<float>(1092616192));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "f64_align_switch", static_cast<uint32_t>(0))) == static_cast<double>(4621819117588971520));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "f64_align_switch", static_cast<uint32_t>(1))) == static_cast<double>(4621819117588971520));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "f64_align_switch", static_cast<uint32_t>(2))) == static_cast<double>(4621819117588971520));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "f64_align_switch", static_cast<uint32_t>(3))) == static_cast<double>(4621819117588971520));
   CHECK(to_f64(*bkend.call_with_return(nullptr, "env", "f64_align_switch", static_cast<uint32_t>(4))) == static_cast<double>(4621819117588971520));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(0), static_cast<uint32_t>(0), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(0), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(1), static_cast<uint32_t>(0), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(1), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(2), static_cast<uint32_t>(0), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(2), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(2), static_cast<uint32_t>(2), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(3), static_cast<uint32_t>(0), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(3), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(3), static_cast<uint32_t>(2), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(0), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(1), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(2), )) == static_cast<uint32_t>(10));
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "i32_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(4), )) == static_cast<uint32_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(0), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(0), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(1), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(1), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(2), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(2), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(2), static_cast<uint32_t>(2), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(3), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(3), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(3), static_cast<uint32_t>(2), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(2), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(4), static_cast<uint32_t>(4), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(5), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(5), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(5), static_cast<uint32_t>(2), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(5), static_cast<uint32_t>(4), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(6), static_cast<uint32_t>(0), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(6), static_cast<uint32_t>(1), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(6), static_cast<uint32_t>(2), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(6), static_cast<uint32_t>(4), )) == static_cast<uint64_t>(10));
   CHECK(to_i64(*bkend.call_with_return(nullptr, "env", "i64_align_switch", static_cast<uint32_t>(6), static_cast<uint32_t>(8), )) == static_cast<uint64_t>(10));
}

TEST_CASE( "Testing wasm <align_test_107_wasm>", "[align_test_107_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_107_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

   CHECK_THROWS_AS(bkend(nullptr, "env", "store", static_cast<uint32_t>(65532), static_cast<uint64_t>(18446744073709551615), ), std::exception);
   CHECK(to_i32(*bkend.call_with_return(nullptr, "env", "load", static_cast<uint32_t>(65532))) == static_cast<uint32_t>(0));
}

TEST_CASE( "Testing wasm <align_test_10_wasm>", "[align_test_10_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_10_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_11_wasm>", "[align_test_11_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_11_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_12_wasm>", "[align_test_12_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_12_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_13_wasm>", "[align_test_13_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_13_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_14_wasm>", "[align_test_14_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_14_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_15_wasm>", "[align_test_15_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_15_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_16_wasm>", "[align_test_16_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_16_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_17_wasm>", "[align_test_17_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_17_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_18_wasm>", "[align_test_18_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_18_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_19_wasm>", "[align_test_19_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_19_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_1_wasm>", "[align_test_1_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_1_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_20_wasm>", "[align_test_20_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_20_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_21_wasm>", "[align_test_21_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_21_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_22_wasm>", "[align_test_22_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_22_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_2_wasm>", "[align_test_2_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_2_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_3_wasm>", "[align_test_3_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_3_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_4_wasm>", "[align_test_4_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_4_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_5_wasm>", "[align_test_5_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_5_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_6_wasm>", "[align_test_6_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_6_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_7_wasm>", "[align_test_7_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_7_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_8_wasm>", "[align_test_8_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_8_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

TEST_CASE( "Testing wasm <align_test_9_wasm>", "[align_test_9_wasm_tests]" ) {
   auto code = backend_t::read_wasm( align_test_9_wasm ) );
   backend_t bkend( code );
   bkend.set_wasm_allocator( &wa );

}

